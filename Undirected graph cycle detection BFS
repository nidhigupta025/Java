
class Solution
{
    public boolean bfs(ArrayList<ArrayList<Integer>> adj, int s, int []vis)
    {
        
         Queue<int[]>q=new LinkedList<>();
        
         
         q.add(new int[]{s,-1});
         vis[s]=1;
         
         while(!q.isEmpty())
         {
             int node=q.peek()[0];
             int par=q.peek()[1];
             q.remove();
             
             for(Integer i:adj.get(node))
             {
                 if(vis[i]==0)
                 {
                     vis[i]=1;
                     q.add(new int[]{i,node});
                 }
                 else if(par!=i)
                 return true;
             }
         }
         return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        int[] vis=new int[V];
        Arrays.fill(vis,0);
        for(int i=0;i<V;i++)
        {
            if(vis[i]==0)
            {
                if(bfs(adj,i,vis))
                return true;
            }
        }
        return false;
    }
}
